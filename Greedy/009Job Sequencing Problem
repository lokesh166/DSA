static bool comp(Job a, Job b) {
        return a.profit > b.profit;
    }
    
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr, arr+n, comp);
        
        bool result[n] = {0};
        
        int day=0, maxProfit=0, i, j;
        
        for(i=0; i<n; i++) {
            
            for(j=min(n, arr[i].dead-1); j>=0; j--) {
                if(result[j] == false) {
                    day += 1;
                    maxProfit += arr[i].profit;
                    result[j] = true;
                    break;
                }
            }
        }
        return {day, maxProfit};
    } 
};

//{ Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0;
