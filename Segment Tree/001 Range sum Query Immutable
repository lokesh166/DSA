
// the time complexity of this solution is o(n*m) 
// n is the numbet of query and m is traverse the array from left index to right index

class NumArray {
public:
    vector<int> nums;
    NumArray(vector<int>& nums) {
        this->nums = nums;
    }
    
    int sumRange(int left, int right) {
        // accumulate is a inbuilt function that calculate the sum at particular indix t0 particular index
        return accumulate(this->nums.begin()+left, this->nums.begin()+right+1, 0);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
 
 
 
 
 
 
 solution 2 
 
 
 class NumArray {
public:
    vector<int> nums;
    vector<int> prefix;
    
    NumArray(vector<int>& nums) {
        this->nums = nums;
        int n = nums.size();
        prefix.resize(n);
        prefixCalculator(nums);
    }
    
    int sumRange(int left, int right) {
        return (left-1 >= 0) ? prefix[right] - prefix[left-1] : prefix[right];
    }
    
    void prefixCalculator(vector<int> nums) {
        
        for(int i=0; i<nums.size(); i++) 
            (i==0) ? prefix[i] = nums[i] : prefix[i] = prefix[i-1] + nums[i];
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(left,right);
 */
